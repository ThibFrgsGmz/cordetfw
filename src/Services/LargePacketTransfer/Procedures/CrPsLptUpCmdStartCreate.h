/**
 * @file CrPsLptUpCmdStartCreate.h
 * @ingroup Serv13
 * @ingroup procedures
 *
 * @brief Create one instance of the CrPsLptUpCmdStart procedure
 *
 * This header file declares the function to create one instance of the CrPsLptUpCmdStart procedure.
 * The procedure is configured with a set of function pointers representing the non-default
 * actions and guards of the procedure. Some of these functions may also be declared in
 * this header file in accordance with the configuration of the procedure in the FW Profile
 * Editor. In the latter case, the user has to provide an implementation for these functions
 * in a user-supplied body file.
 *
 * This header file has been automatically generated by the FW Profile Editor.
 * The procedure created by this file is shown in the figure below.
 * @image html CrPsLptUpCmdStart.png
 *
 * @author FW Profile code generator version 5.01
 * @date Created on: Nov 26 2017 12:7:49
 *
 * @author Christian Reimers <christian.reimers@univie.ac.at>
 * @author Markus Rockenbauer <markus.rockenbauer@univie.ac.at>
 * 
 * last modification: 22.01.2018
 * 
 * @copyright P&P Software GmbH, 2015 / Department of Astrophysics, University of Vienna, 2018
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. 
 *
 */

/** Make sure to include this header file only once */
#ifndef CRPSLPTUPCMDSTART_H_
#define CRPSLPTUPCMDSTART_H_

/** FW Profile function definitions */
#include "FwPrConstants.h"

/** Action node identifiers */
#define CrPsLptUpCmdStart_N1 (1)		/* The identifier of action node N1 in procedure CrPsLptUpCmdStart */
#define CrPsLptUpCmdStart_N2 (2)		/* The identifier of action node N2 in procedure CrPsLptUpCmdStart */
#define CrPsLptUpCmdStart_N3 (3)		/* The identifier of action node N3 in procedure CrPsLptUpCmdStart */
#define CrPsLptUpCmdStart_N4 (4)		/* The identifier of action node N4 in procedure CrPsLptUpCmdStart */

/**
 * Create a new procedure descriptor.
 * This interface creates the procedure descriptor dynamically.
 * @param prData the pointer to the procedure data.
 * A value of NULL is legal (note that the default value of the pointer
 * to the procedure data when the procedure is created is NULL).
 * @return the pointer to the procedure descriptor
 */
FwPrDesc_t CrPsLptUpCmdStartCreate(void* prData);

/**
 * Action for node N1.
 * <pre>
 * Determine the
 * identifier of the LPT Buffer 
 * </pre>
 * @param smDesc the procedure descriptor
 */
void CrPsLptUpCmdStartN1(FwPrDesc_t prDesc);

/**
 * Action for node N2.
 * <pre>
 * Set action 
 * outcome to 'Failure'
 * </pre>
 * @param smDesc the procedure descriptor
 */
void CrPsLptUpCmdStartN2(FwPrDesc_t prDesc);

/**
 * Action for node N3.
 * <pre>
 * Set lptFailCode
 * to PART_NMB_ERR
 * </pre>
 * @param smDesc the procedure descriptor
 */
void CrPsLptUpCmdStartN3(FwPrDesc_t prDesc);

/**
 * Action for node N4.
 * <pre>
 * Set action
 * outcome to 'Success'
 * </pre>
 * @param smDesc the procedure descriptor
 */
void CrPsLptUpCmdStartN4(FwPrDesc_t prDesc);

/**
 * Guard on the Control Flow from DECISION1 to N2.
 * <pre>
 * LPT State Machine associated
 * to LPT Buffer is not in 
 * state UP_TRANSFER 
 * </pre>
 * @param smDesc the procedure descriptor
 * @return 1 if the guard is fulfilled, otherwise 0.
 */
FwPrBool_t CrPsLptUpCmdStartG1(FwPrDesc_t prDesc);

/**
 * Guard on the Control Flow from DECISION2 to N3.
 * Flag_1 
 * @param smDesc the procedure descriptor
 * @return 1 if the guard is fulfilled, otherwise 0.
 */
FwPrBool_t CrPsLptUpCmdStartNG2(FwPrDesc_t prDesc);

#endif /* CrPsLptUpCmdStartCreate_H_ */