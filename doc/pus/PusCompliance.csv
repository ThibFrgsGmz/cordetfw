ReqN,ReqTitle,ReqText,Status,Justification
5.3.1a,General,Each service type shall be uniquely identified by exactly one service type name.,C1/C2,The service type of pre-defined services is taken from the PUS and the service types of other services are set by the application developers at adaptation point ICM-18 for incoming commands and OCM-7 for out-going reports.
b,,"Each service type shall be uniquely identified by exactly one service type identifier that is an unsigned integer greater than or equal to 1, and less than or equal to 255.",C1/C2,See justification of previous requirement.
c,,Each standard service type shall have a service type identifier less than or equal to 127.,C1/C2,See justification of previous requirement.
d,,Each mission specific service type shall be associated with a service type identifier greater than or equal to 128.,C1/C2,See justification of previous requirement.
5.3.2a,Subservice Type,Each service type shall define at least one subservice type.,C1,"For pre-defined services, at least one sub-service is defined (see section TBD to TBD). For other services, adaptation points ICM-19 for incoming commands and OCM-8 for out-going reports imply definition of a sub-service for each service."
b,,Each subservice type shall be defined by exactly one service type.,C1/C2,"For pre-defined services, the definition of the PUS is taken over. For other services, compliance may be achieved when closing adaptation point ICM-19 for incoming commands and OCM-8 for out-going reports."
c,,Each subservice type shall be uniquely identified by exactly one subservice type name.,C1/C2,See justification of previous requirement.
d,,"For each subservice type, whether the realization of that subservice type is implicitly required for each realization of the service type or required by tailoring shall be declared when specifying that subservice type.",NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
e,,"For each subservice type, whether multiple realizations of that subservice type are allowed within a single service shall be declared when specifying that subservice type.",NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
f,,"For each subservice type, the observables shall be declared when specifying that subservice type.",C1/C2,A list of observables is provided for each pre-defined service in this document (see Observability Tables in sections TBD to TBD)
5.3.3.1a,Message Type,Each message type shall be uniquely identified by exactly one message type name.,C1,The CORDET Framework implements a Message as a command or report exchanged between applications and defines a message to have one single type and one single sub-type (see section 4 of CORDET Framework Definition Document).
b,,Each message type shall be uniquely identified by exactly one message type identifier.,C1,See justification of previous requirement.
c,,Each message type identifier shall be composed of: \newline 1. the service type identifier of the service type that contains that message type; \newline 2. a message subtype identifier that uniquely identifies that message type within that service type.,C1,See justification of previous requirement.
d,,"Each message subtype identifier shall be an unsigned integer greater than or equal to 1, and less than or equal to 255.",C1/C2,"For pre-defined services, the command and report types are taken over from the PUS. For other services, they are under the control of the application developer through adaptation points ICM-18, ICM-19, OCM-7 and OCM-8."
e,,Each standard message type identifier shall have a message subtype identifier less than or equal to 127.,C1/C2,See justification of previous requirement.
f,,Each mission specific message type that belongs to a standard service type shall have a service subtype identifier greater than or equal to 128.,C1/C2,See justification of previous requirement.
g,,"Each message type shall either be: \newline 1. a request type, or \newline 2. a report type.",C1,See justification of requirement 5.3.3.1a
5.3.3.2a,Request Type,Each request type shall define one or more instruction types.,TBD,The CORDET Framework implements a Request as an incoming command received by an application which uses that command as part of a service it provides to other applications. The concept of instruction type is however not understood.
b,,Each instruction type shall be defined for exactly one request type.,TBD,See justification of previous requirement.
c,,Each instruction type shall be uniquely identified by exactly one instruction type name.,TBD,See justification of previous requirement.
d,,"For each request type and for each instruction type of that request type, whether that request type provides a single instruction slot or multiple instruction slots for that instruction type shall be declared when specifying that request type.",TBD,See justification of previous requirement.
e,,"For each request type that contains several instruction types, the allowed combinations of instruction types that can be used in a request of that request type shall be declared when specifying that request type.",TBD,See justification of previous requirement.
f,,"For each instruction type, the instruction arguments used by that instruction type, their definition and their ordering within the instruction type shall be declared when specifying that instruction type.",TBD,See justification of previous requirement.
g,,"For each request type that provides multiple instruction slots, if that request type constrains the scope of the instructions that can be issued within a request of that type, the argument or set of arguments of the related instruction types that define that scope shall be grouped together in the definition of the request type.",TBD,See justification of previous requirement.
h,,"For each request type, the definition of the request arguments provided by that request type, their definition and their ordering within the request type shall be declared when specifying that request type.",TBD,See justification of previous requirement.
5.3.3.3a,Report Type,"Each report type shall either be: \newline 1. a data report type, \newline 2. a verification report type, or \newline 3. an event report type.",C1/C2,"For pre-defined services, the report types are taken over from the PUS. For other services, the report type is under the control of the application developer through adaptation points OCM-*."
b,,Each report type shall define exactly one notification type.,C1/C2,See justification of previous requirement.
c,,Each notification type shall be defined for exactly one report type.,C1/C2,See justification of previous requirement.
d,,Each notification type shall be uniquely identified by exactly one notification type name.,C1/C2,See justification of previous requirement.
e,,"For each report type and for each notification type of that report type, whether that report type provides a single notification slot or multiple notification slots for that notification type shall be declared when specifying that report type.",C1/C2,See justification of previous requirement.
5.3.4a,Capability Type,Each subservice type shall define at least one capability type.,C1/C2,"For pre-defined services, the subservice types are taken over from the PUS. For other subservices, the subservice type definition is under the control of the application developer through adaptation points OCM-* and ICM-*."
b,,"For each capability type defined by a subservice type, the applicability constraints of that capability type shall be declared when specifying that subservice type.",NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
5.3.5.1a,Transaction Type,Each transaction type shall be defined by exactly one capability type.,TBD,The concept of transaction type is not yet understood
b,,"Each transaction type shall either be: \newline 1. a request related transaction type, \newline 2. an autonomous data reporting transaction type, or \newline 3. an event reporting transaction type.",TBD,See justification of previous requirement.
5.3.5.2.1a,Request related transaction type,Each request related transaction type shall involve exactly one request type.,TBD,See justification of previous requirement.
b,,Each request type shall be involved in exactly one request related transaction type.,TBD,See justification of previous requirement.
5.3.5.2.2a,Response Type,Each request type shall be linked to at most one data report type.,TBD,See justification of previous requirement.
b,,"For each instruction type that is linked to a notification type, whether a realization of that instruction type can cause the generation of multiple notifications shall be declared when specifying that instruction type.",NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
5.3.5.2.3a,Execution verification profile,"For each request type, the pre-conditions to verify prior to starting the execution of each request of that type shall be declared when specifying that request type.",C2,The acceptance condition must be defined as part of the CORDET Framework instantiation process (adaptation points ICM-3)
b,,"For each instruction type, the pre-conditions to verify prior to starting the execution of each instruction of that type shall be declared when specifying that instruction type.",C2/CC,"The CORDET Framework does not have the concept of instruction. For each command, one single execution start check is performed as part of that command's Start Action. This must be defined during the CORDET Framework instantiation process (adaptation point ICM-8)"
c,,"For each request type that provides a multiple instruction slots capability, whether the subservice verifies the suitability of all instructions contained within each request of that type before authorizing the start of execution of that request shall be declared when specifying that request type.",CC,"The CORDET Framework does not have the concept of instruction. For each command, one single execution start check is performed as part of that command's Start Action. Hence, in the CORDET world, start of execution requires that all instructions implicitly contained within a command pass their start check"
d,,"For each instruction type, the conditions to verify during the execution of each instruction of that type shall be declared when specifying that instruction type.",C2/CC,"The CORDET Framework does not have the concept of instruction. For each command, one single Progress Action is performed which executes all instruction implicitly contained in that command. The content of the Progress Action of each command is defined during the CORDET Framework instantiation process (adaptation point ICM-9)"
e,,"For each instruction type, the post-conditions to verify at the end of the execution of each instruction of that type shall be declared when specifying that instruction type.",C2/CC,"The CORDET Framework does not have the concept of instruction. For each command, execution post-conditions are verified by one single Termination Action which verifies the post-conditions for all instruction implicitly contained in that command. The content of the Termination Action of each command is defined during the CORDET Framework instantiation process (adaptation point ICM-10)"
f,,"For each request type, the post-conditions to verify at the end of the execution of each request of that type shall be declared when specifying that request type.",C2/CC,See previous requirement
g,,"For each request type, the execution verification profile used to report the start, progress and completion of execution of each request of that type shall be declared when specifying that request type.",C2,"The PUS Extension of the CORDET Framework defines the failure codes associated to each command failure condition. For application-specific commands, these failure codes must be defined as part of the framework instantiation process (adaptation points ILD-13 and 14 and ICM-12 to 17)"
h,,Each progress of execution notification shall provide the means to uniquely identify the instruction that progress of execution is notified.,C2,"The CORDET Framework does not have the concept of instruction. However. If a command implicitly contains several instructions, application developers can use different failure codes for eachinstruction as part of the closure of adaptation points ICM-9, 14 and 15)"
I,,"For each instruction type, the functionality that the subservice performs when executing an instruction of that type shall be declared when specifying that instruction type.",NA,TBD
j,,"For each request type, the request-specific functionality that the subservice performs when executing a request of that type shall be declared when specifying that request type.",NA,TBD
5.3.5.3a,Autonomous data reporting transaction type,Each autonomous data reporting transaction type shall involve exactly one data report type.,TBD,See justification of requirement 5.3.5.1a
b,,Each data report type shall be involved in at most one autonomous data reporting transaction type.,TBD,See justification of requirement 5.3.5.1a
5.3.5.4a,Event reporting transaction type,Each event reporting transaction type shall involve exactly one event report type.,TBD,See justification of requirement 5.3.5.1a
b,,Each event report type shall be involved in exactly one event reporting transaction type.,TBD,See justification of requirement 5.3.5.1a
5.3.6,Tailoring the generic service type abstraction level,Tailoring the generic service type abstraction level shall consist of:  \newline 1. adding mission-specific service types; \newline 2. adding mission-specific subservice types; \newline 3. adding mission-specific capability types; \newline 4. adding mission-specific message types.,C2,"The CORDET Framework allows new service types and sub-types to be added through adaptation points OCM-* and ICM-*. To each new service, mission-specific capabilities and messages can be associated."
5.4.2.1a,Application process,"Each application process shall either be: \newline 1. an on-board application process, or \newline 2. a ground application process.",C1,The way PUS-style application processes are implemented in the CORDET Framework is discussed in section 2.5 of the CORDET Definition Document
b,,Each application process that hosts at least one subservice provider shall be identified by an application process identifier that is unique across the system that hosts that subservice provider.,C2,The CORDET Framework does not directly implement the PUS concept of Application Process (see discussion in section 2.5 of the CORDET Framework Definition Document) but applications can customize the factory components which create the packets representing commands and reports (adaptation points FAC-1) such that they fill in the header information in the packets in accordance with their allocation of APIDs.
c,,Each application process identifier shall be an unsigned integer that is less than or equal to 2046.,C2,See justification of previous requirement.
d,,Each application process that hosts at least one subservice user shall be identified by an application process user identifier that is unique within the context of the overall space system.,C1,The application process user identifier of a service user is the source of commands issued by that service user and the destination of reports received by that service user. This can be mapped to the concept of command source and report destination (see section 4 of the CORDET Framework Definition Document). 
e,,"Each application process user identifier shall be an unsigned integer that is greater than or equal to 0, and less than or equal to 65535.",C1,See justification of previous requirement.
f,,"For each report that it generates, each on-board application process shall time tag that report using the on-board reference time.",C1,The time-stamp of out-going components is set by the Send Packet Procedure of the OutComponent of the CORDET Framework (see section 6.1.1 of the CORDET Framework Definition Document).
g,,"For each application process, whether that application process time tags the reports before collecting the values of the constituting parameters or after shall be declared when specifying that application process.",C1,"In the CORDET Framework, the time-stamp of a report represents the time when an application makes a request to issue that report (this is after the report data have been collected). See section 4.2.1 of the CORDET Framework Definition Document."
h,,"For each application process, whether that application process provides the capability to report the status of the on-board time reference used when time tagging reports shall be declared when specifying that application process.",NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
I,,"For each application process, whether that application process provides the capability to count the type of generated messages per destination and report the corresponding message type counter shall be declared when specifying that application process.",C1,The OutStream components maintain counters of out-going commands and reports sent to their destination (there is one OutStream for each destination). See section 5.2.1 of the CORDET Framework Definition Document.
j,,"Each application process that provides the capability to count the type of generated messages per destination and report the corresponding message type counter shall maintain, per destination, a counter for each message type that it generates.",C1,See justification of previous requirement.
5.4.3.2a,On-board parameter,Each on-board parameter shall be identified by exactly one on-board parameter identifier that is unique across the entire spacecraft.,C2,The PUS Extension of the CORDET Framework maps on-board parameters to the Data Items in the Data Pool Component. The application developer is responsible for defining the Data Items (see adaptation point DP-7) and this includes the allocation of their identifiers.
b,,The set of on-board parameter minimum sampling intervals used to access the on-board parameters shall be declared when specifying the spacecraft architecture.,TBD,TBD: this is part of the definition of service 3
c,,Each on-board parameter shall be associated to exactly one on-board parameter minimum sampling interval.,TBD,TBD: this is part of the definition of service 3
d,,All on-board parameters accessed by an application process shall be associated to the same on-board parameter minimum sampling interval.,TBD,TBD: this is part of the definition of service 3
5.4.3.3.1a,On-board memory,Each on-board memory shall be identified by exactly one on-board memory identifier.,TBD,TBD: this is part of the definition of service 6
b,,"At any time, each on-board memory identifier shall uniquely identify exactly one on-board memory that is unique across the entire spacecraft.",TBD,TBD: this is part of the definition of service 6
c,,"For each on-board memory, the following characteristics of that memory shall be declared when specifying that memory: \newline 1. the memory access alignment constraint; \newline 2. the memory size, in bytes; \newline 3. the allowed operations; \newline 4. the addressing scheme.",TBD,TBD: this is part of the definition of service 6
d,,"When declaring the characteristics of an on-board memory, the allowed operations shall be one of the following: \newline 1. ""read only""; \newline 2. ""read and write""; \newline 3. ""write only"".",TBD,TBD: this is part of the definition of service 6
e,,"For each on-board memory, whether scrubbing that memory is supported shall be declared when specifying that memory.",TBD,TBD: this is part of the definition of service 6
f,,"For each on-board memory, whether write protecting that memory is supported shall be declared when specifying that memory.",TBD,TBD: this is part of the definition of service 6
5.4.3.3.2a,Addressing Scheme,"For each on-board memory, whether an absolute addressing scheme for that memory is exposed in the space to ground interface shall be declared when specifying that memory.",TBD,TBD: this is part of the definition of service 6
b,,Absolute addressing implies that the memory addresses and related offsets shall be expressed in bytes.,TBD,TBD: this is part of the definition of service 6
c,,"For each on-board memory, whether a base plus offset addressing scheme for that memory is exposed in the space to ground interface shall be declared when specifying that memory.",TBD,TBD: this is part of the definition of service 6
d,,Base plus offset addressing implies that the base references when expressed as an absolute address and related offsets shall be expressed in bytes.,TBD,TBD: this is part of the definition of service 6
5.4.3.4a,Virtual channel,The list of virtual channels defined for downlinking reports and their characteristics shall be declared when specifying the space to ground interface.,NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
b,,"For each virtual channel defined for downlinking reports, the virtual channel identifier used to refer to that virtual channel shall be declared when specifying that virtual channel.",NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
5.4.4,Checksum algorithm,"For each checksum algorithm used on-board, the list of subservice providers that use that checksum algorithm shall be declared when specifying the spacecraft architecture.",,
5.4.5a,On-board file system,Each on-board file system shall be identified by exactly one on-board file system identifier that is unique across the entire spacecraft.,TBD,TBD
b,,Each object in an on-board file system shall be uniquely identified by an object path that is the combination of a repository path and an object name.,TBD,TBD
c,,"For each on-board file system, whether that file system supports files with unbounded size shall be declared when specifying that file system.",TBD,TBD
v,,The set of file attributes supported by each on-board file system shall be declared when specifying that file system.,TBD,TBD
e,,"For each on-board file system, whether that file system provides the capability to lock files shall be declared when specifying file system.",TBD,TBD
f,,An on-board file system shall not be accessed by more than one file management service.,TBD,TBD
5.4.6a,Service,Each service shall be of exactly one service type.,C1,"To each CORDET Service, one single type attribute is assigned (see section 4.1.1 of the CORDET Framework Definition Document)"
b,,"For each subservice type whose realization is implicitly required, each service of the related service type shall provide at least one subservice of that subservice type.",TBD,This requirement is not understood
c,,"For each subservice type whose realization is required by tailoring and for each service of the service type that defines that subservice type, whether the realization of that subservice type is required for that service shall be declared when specifying that service.",TBD,This requirement is not understood
d,,"For each subservice type that allows multiple realizations within a single service, each realization of that subservice type shall be declared when specifying that service.",TBD,This requirement is not understood
e,,The service topology of the overall space system shall be declared when specifying the space system architecture.,C1,The service topology of a CORDET System is defined by several adaptation points and application developers are required to fill in all framework adaptation points (or accept their default implementation) as part of the application instantiation process
5.4.7.1a,Subservice,Each subservice shall be of exactly one subservice type.,C1,"To each CORDET Command or Report, one single sub-type attribute is assigned (see section 4.1.1 of the CORDET Framework Definition Document)"
b,,Each subservice shall belong to exactly one service.,C1/C2,"For pre-defined services, the PUS definition is followed. For application-dependent services, the user is responsible for ensuring that no two commands or reports receive the same definition when the OCM and ICM adaptation points are filled in"
5.4.7.2.1a,Subservice Entity,Each subservice entity shall belong to exactly one subservice.,TBD,The difference between this requirement and requirement 5.4.7.1a is not understood
b,,Each subservice entity shall be hosted by exactly one application process.,TBD,This requirement is not understood
c,,Each subservice entity shall be either a subservice user or a subservice provider.,TBD,This requirement is not understood
5.4.7.2.2a,Subservice Provider,Each subservice shall provide exactly one subservice provider.,TBD,This requirement is not understood
5.4.7.2.3a,Subservice User,Each subservice shall provide at least one subservice user.,TBD,This requirement is not understood
5.4.8a,Capability,Each subservice shall provide at least one subservice capability.,TBD,This requirement is not understood
5.4.8b,,"For each subservice and for each capability type defined by the corresponding subservice type, the inclusion of the related capability in that subservice shall comply with the applicability constraints of that capability type.",TBD,This requirement is not understood
5.4.9a,Failed progress of execution,"For each request type for which a failed progress of execution can be reported, whether the corresponding failed progress of execution notifications are reported within failed progress of execution verification reports or as part of the completion of execution verification report for the related requests shall be declared when specifying the request type related subservice.",C1,"If a service chooses the support verification of failed progress of execution, then this can only be reported through (1,5) and (1,6) reports (see definition of service 1)"
5.4.10a,Transactions,Each subservice shall provide the means to manage all transactions that it initiates according to the mission operational requirements.,C2,A transaction is implemented by a command and the reports which are triggered by that command (TBC). Application developers are responsible for selecting the set of supported commands and reports such that thus requirement is satisfied
b,,Each transaction shall be initiated and maintained by exactly one subservice.,C2,See justification of previous requirement.
5.4.11.1a,Message,Each message shall be of a single message type.,C1,A message consists of a single command or report exchange (TBC) and hence its type is the type fo the command or report (TBC). It is therefore of a single type by definition
5.4.11.2.1a,Request,Each request shall be generated by exactly one subservice user.,NA,This requirement concerns service users and the PUS Extension of the CORDET Framework covers service providers
b,,Each request shall be addressed to exactly one subservice provider.,NA,See justification of previous requirement.
c,,Each request shall be uniquely identified by a request identifier that is the combination of: \newline 1. a source identifier that corresponds to the application process user identifier of the application process that hosts the subservice user that generates that request; \newline 2. a destination identifier that corresponds to the combination of the application process identifier of the application process that hosts the subservice provider that is responsible for executing that request and the system identifier of the system that hosts that application process; \newline 3. a sequence count or request name that is produced by the application process that hosts the subservice user.,C1,CORDET Commands which carry dentifiers of both their source and destination and a source sequence counter (see section 4.1 of the CORDET Framework Definition Document)
d,,Each request shall be of exactly one request type.,C1,"The type of a CORDET command is given by the pair [type, sub-type]."
e,,Each request whose request type provides a single instruction slot shall contain exactly one instruction that is of an instruction type defined for that request type.,TBD,This requirement is not understood
f,,"Each request whose request type provides multiple instruction slots shall contain an ordered list of one or more instructions, each one being of an instruction type defined for that request type.",TBD,This requirement is not understood
5.4.11.2.2a,Acknowledgement,Each request shall contain: \newline 1. a flag indicating whether the reporting of the successful acceptance of that request by the destination application process is requested; \newline 2. a flag indicating whether the reporting of the successful start of execution of that request by the destination application process is requested; \newline 3. a flag indicating whether the reporting of the successful progresses of execution of that request by the destination application process is requested; \newline 4. a flag indicating whether the reporting of the successful completion of execution of that request by the destination application process is requested.,C1,"CORDET commands carry four acknowledgement flags which determined which of the four stages of their life-cycle (acceptance, start, progress, and termination) are acknowledged (see section 4.1 of the CORDET Framework Definition Document)"
5.4.11.2.3a,Request execution verification,"For each request that it receives, the subservice provider in charge of the execution of that request shall, in sequence: \newline 1. if the pre-conditions for the execution of that request are not fulfilled: \newline (a) notify the execution reporting subservice of its parent application process of the failed start of execution; \newline (b) stop processing that request; \newline 2. if the pre-conditions for the execution of that request are fulfilled, \newline notify the execution reporting subservice of its parent application process of the successful start of execution; \newline 3. for each step, if any: \newline (a) verify the execution conditions of that step, if any; \newline (b) if the execution conditions of that step are not fulfilled, notify the execution reporting subservice of its parent application process of the failed progress of execution of that step; \newline (c) if the step's execution conditions are fulfilled, notify the execution reporting subservice of its parent application process of the successful progress of execution of that step; \newline at the end of the execution of that request: newline (a) verify the post-conditions of execution, if any; \newline (b) if any step execution has failed or if the post-conditions of execution are not fulfilled, notify the execution reporting subservice of its parent application process of the failed completion of execution and stop processing that request; \newline (c) if the post-conditions of execution are fulfilled, notify the execution reporting subservice of its parent application process of the successful completion of execution;",C1,"The life-cycle of a CORDET command in a service provider is defined in section 4.1 of the CORDET Framework Definition Document. As requested by this requirement, acceptance, progress and termination checks are performed and notification may be sent out in response to these checks. However, failure of a progress step leads to termination of execution of the command. In such a case (failure of a progress step), the originator of the request is notified with one single failure report indicating the failure of the progress and, by implication, also the failure of the command completion. "
5.4.11.3.1a,Report,Each report shall be generated by exactly one subservice provider.,C1,"In the CORDET Framework, both reports and commands have one single source"
b,,Each report shall be addressed to exactly one subservice user.,C1,"In the CORDET Framework, both reports and commands have one single destination"
c,,Each report shall be uniquely identified by a report identifier that is the combination of: \newline 1. a source identifier that is the application process identifier of the application process that hosts the subservice provider that generates that report; \newline 2. a destination identifier that corresponds to the application process user identifier of the application process that hosts the subservice user that is responsible for processing that report; \newline 3. a source sequence count that is produced by the application process that hosts the subservice provider.,C1,CORDET reports carry identifiers of both their source and destination and a source sequence counter (see section 4.2 of the CORDET Framework Definition Document)
d,,Each report shall be of exactly one report type.,C1,"The type of a CORDET report is given by the pair [type, sub-type]."
e,,Each report whose report type provides a single notification slot shall contain exactly one notification that is of a notification type defined for that report type.,TBD,This requirement is not understood
f,,"Each report whose report type provides multiple notification slots shall contain an ordered list of one or more notifications, where: \newline 1. all notifications in the list are of the same notification type, and \newline 2. that notification type is one of those defined for that report type.",TBD,This requirement is not understood
5.4.11.3.2a,Response,The destination of any response shall be the source of the corresponding request.,C1/C2,"For pre-defined services, the PUS is followed. For application-specific services, this requirement must be enforced by application developers when they close adaptation point OCM-9."
,,"If a request implies the generation of a response that exceeds the length that can be carried in a telemetry packet of the maximum packet size of the CCSDS space packet protocol, that request shall be rejected.",C1/C2,"For pre-defined services, the PUS is followed. For application-specific services, this requirement must be enforced by application developers when they define the start check for command (see adaptation point ICM-12)."
5.4.11.3.3a,Data Report,"For each data report that can be generated in an autonomous data reporting transaction, the destination of the data report in that case shall be declared when specifying the related subservice.",NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
5.4.12a,Building the space system architecture,Deploying the service topology of an overall space system should consist of: \newline 1. specifying new implementations of PUS services by instantiating the service types and related components; \newline 2. assessing the adequacy of reusing existing service implementations: (a) ensuring their compliance to the PUS standard services; \newline (b) verifying their compliance to the overall system constraints.,NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
6.1.2.1a,Request Verification,"Each request verification service shall contain at least one of the following: \newline 1. one or more routing and reporting subservices, \newline 2. one or more acceptance and reporting subservices, \newline 3. one or more execution reporting subservices.",C1,The PUS Extension of the CORDET Framework allows an application to deploy one single subservice of each type identified in this requirement
6.1.2.2.1a,Destination of verification reports,"For each verification report that it generates, the application process shall address that report to the application process that hosts the subservice user that has generated the corresponding request.",C1,See adaptation point P-S1-17
6.1.2.2.2a,Application process that routes requests,Each application process that is involved in routing requests shall host exactly one routing and reporting subservice.,C1,CORDET applications have the capability to re-route commands and the PUS Extension of the CORDET Framework provides an implementation of the routing and reporting subservice (section 6 of PUS Extension Document)
6.1.2.2.3a,Application process that executes requests,Each application process that hosts one or more subservices that execute requests shall host: \newline 1. exactly one acceptance and reporting subservice; \newline 2. at most one execution reporting subservice.,C1,CORDET applications have the capability to execute requests and the PUS Extension of the CORDET Framework provides an implementation of both the acceptance and reporting sub-service and the execution reporting sub-service (see section 6 of PUS Extension Document)
6.1.3.1.1a,Application Process,The list of application processes that the routing and reporting subservice addresses shall be declared when specifying the spacecraft architecture.,NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
6.1.3.2a,Routing verification of a request,The routing and reporting subservice shall provide the capability to perform routing verification for the requests that it receives.,C1,"The PUS Extension of the CORDET Framework supports the (1,10) sub-service which reports routing failures for incoming commands"
b,,The list of routing verification checks that the routing and reporting subservice performs shall be declared when specifying that subservice.,C1,"The (1,10) sub-service supports one single check which verifies whether the destination of an incoming command is valid"
c,,"For each request that it receives, the routing and reporting subservice shall: \newline 1. perform the routing verification checks on that request; \newline 2. determine, based on the output of those checks, whether the routing verification of that request has succeeded or failed.",C1,"See specification of (1,10) sub-service: routing verification is performed by the InLoader when it verifies whether an incoming command has a valid destination"
6.1.3.3a,Reporting Failed Routing,The routing and reporting subservice shall provide the capability to report the failed routing of requests.,C1,"See specification of (1,10) sub-service: reporting of failed routing is performed by the Operation to Report Packet Destination Invalid of the InLoader "
,,Each failed routing verification report shall contain exactly one failed routing notification.,C1,The Operation to Report Packet Destination Invalid of the InLoader is called once for each failed routing event
,,"Each failed routing notification shall contain: \newline 1. the identifier of the request that failed the routing verification; \newline 2. the failure notice made of: \newline (a) a failure code; \newline auxiliary data, if any, used to explain the reason for the failed routing.",C1,"The specification of the (1,10) report follows the PUS. The auxiliary information is specified in the Packet Rerouting Failure Procedure"
,,The list of failure codes defined for failed routing notifications shall be declared when specifying the routing and reporting subservice.,C1,The list of failure codes and their auxiliary data for service 1 reports is specified in TBD
,,"For each failure code defined for failed routing notifications, the associated auxiliary data shall be declared when specifying the routing and reporting subservice.",,See previous requirement
,,"For each request that fails its routing verification, the routing and reporting subservice shall: \newline 1. generate a single failed routing notification and associated report for that request; \newline 2. discard that request.",C1,See Packet Rerouting Failure Procedure
6.1.4.1a,Acceptance verification of a request,The acceptance and reporting subservice shall provide the capability to perform acceptance verification for a request that it receives.,C1,The acceptance check is part of the life-cycle of CORDET Framework incoming commands. It is implemented by the InLoader component.
b,,The list of acceptance verification checks that the acceptance and reporting subservice performs during the acceptance verification of a request shall be declared when specifying that subservice.,C2,Application specify acceptance checks for incoming commands by closing adaptation point OCM-3
c,,"For each request that it receives, the acceptance and reporting subservice shall: \newline 1. perform the acceptance verification checks on that request; \newline 2. determine, based on the output of those checks, whether the acceptance verification of that request has succeeded or failed.",C1,"In the CORDET Framework, the acceptance check for an incoming command is split into two parts: the first part is done by the InLoader when it verifies that the command's type and sub-type are legal and that the InCommand component can be created and the second part is done by the InCommand component when it is configured"
6.1.4.2a,Reporting Successful Acceptance,The acceptance and reporting subservice shall provide the capability to report the successful acceptance verification of requests.,C1,See Operation to Report Acceptance Success (Adaptation Point ILD-13)
b,,Each successful acceptance verification report shall contain exactly one successful acceptance notification.,C1,See definition of InLoader component: the operation to Report Acceptance Success is called once for each incoming command which passes its acceptance check
c,,Each successful acceptance notification shall contain: \newline 1. the identifier of the request that successfully passed the acceptance verification.,C1,"The specification of the content of the (1,1) reports follows the PUS"
d,,"For each request that successfully passes its acceptance verification, the acceptance and reporting subservice shall: \newline 1. if the successful acceptance reporting is requested, generate a single successful acceptance notification and associated report for that request.",C1,See definition of InLoader component.
6.1.4.3a,Reporting failed acceptance,The acceptance and reporting subservice shall provide the capability to report the failed acceptance of requests.,C1,The PUS Extension of the CORDET Framework implements service 1 in full (see requirements P-S1-*).
b,,Each failed acceptance verification report shall contain exactly one failed acceptance notification.,C1,Each service 1 report covers one single command failure.
c,,"Each failed acceptance notification shall contain: \newline 1. the identifier of the request that failed the acceptance verification; \newline 2. the failure notice made of: \newline (a) a failure code; \newline (b) auxiliary data, if any, used to explain the reason for the failed acceptance.",C1,See definition of service 1 report layout in section 7.1 of [PS-SP].
d,,The list of failure codes defined for failed acceptance notifications shall be declared when specifying the acceptance and reporting subservice.,C1/C2,The failure codes defined at the level of the PUS Extension of the CORDET Framework are defined in requirement P-S1-12 but applications may define additional failure codes.
e,,"For each failure code defined for failed acceptance notifications, the associated auxiliary data shall be declared when specifying the acceptance and reporting subservice.",C1,Auxiliary data are not failure-code-specific. See definition of service 1 report layout in section 7.1 of [PS-SP].
f,,"For each request that fails its acceptance verification, the acceptance and reporting subservice shall: \newline 1. generate a single failed acceptance notification and associated report for that request; \newline 2. discard that request.",C1,See definition of report component VerAccFailed.
6.1.5.1.1a,Reporting successful start of execution,The execution reporting subservice shall provide the capability to generate the successful start of execution verification reports.,C1,The PUS Extension of the CORDET Framework implements service 1 in full (see requirements P-S1-*).
b,,"For each successful start of execution notification that it receives, the execution reporting subservice shall: \newline 1. if the successful start of execution reporting is requested, generate a single successful start of execution verification report containing that notification.",C1,See definition of report component VerStartSucc. Note that  the processing of a incoming command can result in at most one single Successful Start of Execution Notification.
6.1.5.1.2a,Reporting failed start of execution,The execution reporting subservice shall provide the capability to generate the failed start of execution verification reports.,C1,The PUS Extension of the CORDET Framework implements service 1 in full (see requirements P-S1-*).
b,,"For each failed start of execution notification that it receives, the execution reporting subservice shall: \newline 1. generate a single failed start of execution verification report containing that notification.",C1,"See definition of report component VerStartFailed. Note that a command whose start of execution fails is discarded (i.e. the command terminates with the generation of a (1,4) report). Note also that the processing of a incoming command can result in at most one single Failed Start of Execution Notification."
6.1.5.2.1a,Reporting successful progress of execution,The execution reporting subservice shall provide the capability to generate the successful progress of execution verification reports.,C1,The PUS Extension of the CORDET Framework implements service 1 in full (see requirements P-S1-*).
b,,"For each successful progress of execution notification that it receives, the execution reporting subservice shall: \newline 1. if the successful progress of execution reporting is requested, generate a single successful progress of execution verification report containing that notification.",C1/C2,See definition of report component VerPrgrSucc. The definition of the progress steps is under the responsibility of applications (see adaptation point P-S1-7)
6.1.5.2.2a,Reporting failed progress of execution,The execution reporting subservice shall provide the capability to generate the failed progress of execution verification reports.,C1,The PUS Extension of the CORDET Framework implements service 1 in full (see requirements P-S1-*).
b,,"For each failed progress of execution notification that it receives, the execution reporting subservice shall: \newline 1. if the application process that hosts the execution reporting subservice is configured for the corresponding request type to report the failed progress of execution notifications in failed progress of execution verification reports, generate a single failed progress of execution verification report containing that notification.",C1,"See definition of report component VerPrgrFailed. Note that a command whose progress of execution fails is discarded (i.e. the command terminates with the generation of a (1,6) report)."
6.1.5.3.1a,Reporting successful completion of execution,The execution reporting subservice shall provide the capability to generate the successful completion of execution verification reports.,C1,The PUS Extension of the CORDET Framework implements service 1 in full (see requirements P-S1-*).
b,,"For each successful completion of execution notification that it receives, the execution reporting subservice shall: \newline 1. if the successful completion of execution reporting is requested, generate a single successful completion of execution verification report containing that notification.",C1,See definition of report component VerTermSucc.
6.1.5.3.2a,Reporting failed completion of execution,The execution reporting subservice shall provide the capability to generate the failed completion of execution verification reports.,C1,The PUS Extension of the CORDET Framework implements service 1 in full (see requirements P-S1-*).
b,,"For each failed completion of execution notification that it receives, the execution reporting subservice shall: \newline 1. generate a single failed completion of execution verification report containing that notification.",C1,See definition of report component VerTermFailed.
c,,"For each failed completion of execution notification that is accompanied of failed progress of executions notifications to be reported as part of the completion of execution verification report, the execution reporting subservice shall include those failed progress of execution notifications in the failed completion of execution notification.",n.a.,"The failure of progress of execution is reported through a (1,6) report and the generation of the (1,6) report excludes the generation of the (1,8) report."
6.2,Device Access,Definition of service 2,,This service is not supported by the PUS Extension of the CORDET Framework
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
,,,,
6.17.2.1.1a,Test subservice,Each test service shall contain at least one test subservice.,C1,The PUS Extension of the CORDET Framework supports service 17 in full
6.17.2.2a,Application process,Each application process shall host at most one test subservice provider.,C1,An application instantiated from the CORDET Framework can only provide one instance of a service of a given type
6.17.3a,Perform an are-you-alive connection test,The test subservice shall provide the capability to perform an are-you-alive connection test.,C1,The PUS Extension of the CORDET Framework supports sub-types 1 and 2 of service 17
b,,Each request to perform an are-you-alive connection test shall contain exactly one instruction to perform an are-you-alive connection test.,C1,"Command (17,1) triggers one single are-you-alive test"
c,,"For each valid instruction to perform an are-you-alive connection test, the test subservice shall generate a single are-you-alive connection test notification that notifies that the application process that hosts the test subservice is alive and has successfully received the request.",C1,"The command (17,1) triggers generation of one single report (17,2)"
d,,"For each valid request to perform an are-you-alive connection test, the test subservice shall generate a single are-you-alive connection test report that includes the related are-you-alive connection test notification.",C1,"The command (17,1) triggers generation of one single report (17,2)"
6.17.4.1a,Application process accessibility,The list of application processes for which the test subservice can perform an on-board connection testing shall be declared when specifying that subservice.,NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
b,,"For each application process for which the test subservice can perform an on-board connection testing, the criteria for a successful on-board connection test between that application process and that service shall be declared when specifying that subservice.",NA,"This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework. In general, the success criterium for an are-you-alive test is that a (17,2) report be generated in response to a (17,1) command but applications may specify additional timing constraints."
6.17.4.2a,Perform an on-board connection test,The test subservice capability to perform an on-board connection test shall be declared when specifying that subservice.,NA,This requirement does not concern the implementation of the services and is therefore outside the scope of the PUS Extension of the CORDET Framework
b,,Each request to perform an on-board connection test shall contain exactly one instruction to perform an on-board connection test.,C1,"A command (17,3) contains triggers one single on-board connection test"
c,,Each instruction to perform an on-board connection test shall contain: the identifier of the application process that connection test is requested.,C1,"See specification command (17,3)"
d,,The test subservice shall reject any request to perform an on-board connection test if: \newline 1. that request contains an instruction that refers to an application process that is not in the list of application processes for which the test subservice can perform an on-board connection testing.,C1,"The start action of command (17,3) checks the legality of the target for the connection test and declares failure if this does not match an entry in a pre-defined list of application identifiers"
e,,"For each request to perform an on-board connection test that is rejected, the test subservice shall generate a failed start of execution notification.",C1,See statement of compliance to previous requirement
f,,"For each valid instruction to perform an on-board connection test, the test subservice shall: \newline 1. perform a connection test with the application process referred to by that instruction; \newline 2. if the criteria for a successful on-board connection test with that application process are satisfied, generate a single on-board connection test notification that includes the identifier of the application process that connection has been tested. \newline 3. if the criteria for a successful on-board connection test with that application process are not satisfied, generate a failed completion of execution verification report.",C1,"See progress action of command (17,3). The connection test is implemented as an Are-You-Alive test with the target application."
g,,"For each valid request to perform an on-board connection test, the test subservice shall generate a single on-board connection test report that includes the related on-board connection test notification.",C1,"See progress action of command (17,3) and specification of report (17,4)"
